Typedef.     Stmt   ::= "typedef" TyDecl ;

TyDeclSpec.  TyDecl ::= TySpec Ident	;
TyDeclId.    TyDecl ::= TyId Ident	;

TyGroup.    TySpec ::= TySpec1 TySpec  ;
TyPointer.  TySepc ::= TySpec1 "*"     ;

TyEnum.     TySpec ::= Enum   "{" [EnumDecl]   "}" ;
TyUnion.    TySpec ::= Union  "{" [StructDecl] "}" ;
TyStruct.   TySpec ::= Struct "{" [StructDecl] "}" ;

TyUnsigned. TySpec ::= "unsigned" ;
TySigned.   TySpec ::= "signed"   ;
TyDouble.   TySpec ::= "double"   ;
TyFloat.    TySpec ::= "float"    ;
TyLong.     TySpec ::= "long"     ;
TyInt.	    TySpec ::= "int"	  ;
TyShort.    TySpec ::= "short"    ;
TyChar.     TySpec ::= "char"	  ;
TyVoid.     TySpec ::= "void"	  ;

_. TySpec1 = TySpec  ;

separator nonempty EnumDecl   ","       ;
separator nonempty StructDecl ";"	;

IdUnion.   TyId ::= "union" Ident	;
IdEnum.    TyId ::= "enum" Ident	;
iIdStruct. TyId ::= "struct" Ident	;

UniIdent. Union  ::= Union1 Ident	;
UniAnon.  Union1 ::= "union		;

EnuIdent. Enum   ::= Enum1 Ident	;
EnuAnon.  Enum1  ::= "enum"		;

StuIdent. Struct  ::= Struct1 Ident     ;
StuAnon.  Struct1 ::= "struct"		;

DEnum.   EnumDecl   ::= Ident		;
DStruct. StructDecl ::= TySpec Ident	;

separator nonempty Exp "," ;

ECall.   Exp6 ::= Ident "(" [Exp] ")"          ;

EInt.    Exp5 ::= Integer   ;
EChar.   Exp5 ::= Char	    ;
EDouble. Exp5 ::= Double    ;
EIdent.  Exp5 ::= Ident     ;

EAnd.    Exp4 ::= Exp4 "&&" Exp5 ;
EOr.     Exp4 ::= Exp4 "||" Exp5 ;

EPos.    Exp4 ::= "+" Exp5 ;
ENeg.	 Exp4 ::= "-" Exp5 ;
EBitNot. Exp4 ::= "~" Exp5 ;
ENot.    Exp4 ::= "!" Exp5 ;

EBitXor. Exp2 ::= Exp2 "^"  Exp3 ;
EBitOr.  Exp2 ::= Exp2 "|"  Exp3 ;
EBitAnd. Exp2 ::= Exp2 "&"  Exp3 ;

EPower.  Exp1 ::= Exp1 "**" Exp2 ;
EModulo. Exp1 ::= Exp1 "%"  Exp2 ;
ERound.  Exp1 ::= Exp1 "//" Exp2 ;
EDivide. Exp1 ::= Exp1 "/"  Exp2 ;
ETimes.  Exp1 ::= Exp1 "*"  Exp2 ;

EPlus.   Exp  ::= Exp  "+"  Exp1 ;
EMinus.  Exp  ::= Exp "-"  Exp1 ;

_.       Exp6 ::= "(" Exp ")" ;
_.       Exp5 ::= Exp6 ;
_.	 Exp4 ::= Exp5 ;
_.       Exp3 ::= Exp4 ;
_.       Exp2 ::= Exp3 ;
_.       Exp1 ::= Exp2 ;
_.       Exp  ::= Exp1 ;

